import logging
import requests
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# üîê –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = "7780572322:AAFDqw3n-SJ7Vt5oHbo1PoxVDfJegZkntqo"
OPENAI_API_KEY = "—Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏–º –ø–æ–∑–∂–µ"  # –Ω–∞–ø–∏—à–∏, –µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–ª—é—á OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def get_price(symbol="bitcoin"):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol}&vs_currencies=usd"
    response = requests.get(url).json()
    try:
        return f"üí∞ {symbol.capitalize()} = {response[symbol]['usd']}$"
    except:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü–æ–ø—Ä–æ–±—É–π BTC, ETH, TON."

# üí¨ –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI
async def ai_answer(text):
    openai.api_key = OPENAI_API_KEY
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # –∏–ª–∏ –¥—Ä—É–≥–æ–π
            messages=[{"role": "user", "content": text}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ò–ò: {e}"

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è Crypto AI ü§ñ. –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ –∫—Ä–∏–ø—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /price BTC")

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /price BTC")
    else:
        symbol = context.args[0].lower()
        name_map = {"btc": "bitcoin", "eth": "ethereum", "ton": "the-open-network"}
        coin = name_map.get(symbol, symbol)
        await update.message.reply_text(get_price(coin))

# üß† –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply = await ai_answer(update.message.text)
    await update.message.reply_text(reply)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("price", price))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling()
