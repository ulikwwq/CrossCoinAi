import logging
import requests
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# üîê –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ò –ö–õ–Æ–ß–ò (–Ω–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞–π –≤ —Å–µ—Ç—å!)
TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
OPENAI_API_KEY = "YOUR_OPENAI_API_KEY"

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á
def get_price(symbol="bitcoin"):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol}&vs_currencies=usd&include_24hr_change=true"
    try:
        response = requests.get(url).json()
        price = response[symbol]["usd"]
        change = response[symbol]["usd_24h_change"]
        emoji = "üìà" if change >= 0 else "üìâ"
        return f"{emoji} {symbol.capitalize()}: {price:.2f}$ ({change:+.2f}% –∑–∞ 24—á)"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü—Ä–∏–º–µ—Ä: /price BTC"

# üß† –û—Ç–≤–µ—Ç –ò–ò
async def ai_answer(text):
    openai.api_key = OPENAI_API_KEY
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-3.5-turbo –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ."},
                {"role": "user", "content": text}
            ]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "ü§ñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò."

# üìç –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è ü§ñ *Crypto AI Bot*!\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/price BTC ‚Äî –∫—É—Ä—Å –∫—Ä–∏–ø—Ç—ã\n"
        "–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Äî —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞: BTC, ETH, TON, –∏ –¥—Ä—É–≥–∏–µ\n",
        parse_mode="Markdown"
    )

# üíµ –ö–æ–º–∞–Ω–¥–∞ /price
async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /price BTC")
        return
    symbol_input = context.args[0].lower()
    name_map = {
        "btc": "bitcoin",
        "eth": "ethereum",
        "ton": "the-open-network",
        "bnb": "binancecoin",
        "sol": "solana",
        "ada": "cardano",
        "doge": "dogecoin",
        "xrp": "ripple"
    }
    symbol = name_map.get(symbol_input, symbol_input)
    result = get_price(symbol)
    await update.message.reply_text(result)

# ‚úâÔ∏è –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    reply = await ai_answer(user_text)
    await update.message.reply_text(reply)

# üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("price", price))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
